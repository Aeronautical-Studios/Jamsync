syntax = "proto3";
package jampb;

option go_package = "github.com/zdgeier/jam/proto/jampb";

service JamHub {
    // Project operations
    rpc AddProject(AddProjectRequest) returns (AddProjectResponse);
    rpc ListUserProjects(ListUserProjectsRequest) returns (ListUserProjectsResponse);
    rpc GetProjectId(GetProjectIdRequest) returns (GetProjectIdResponse);
    rpc GetProjectCurrentCommit(GetProjectCurrentCommitRequest) returns (GetProjectCurrentCommitResponse);
    rpc GetProjectName(GetProjectNameRequest) returns (GetProjectNameResponse);
    rpc AddCollaborator(AddCollaboratorRequest) returns (AddCollaboratorResponse);
    rpc RemoveCollaborator(RemoveCollaboratorRequest) returns (RemoveCollaboratorResponse);
    rpc GetCollaborators(GetCollaboratorsRequest) returns (GetCollaboratorsResponse);

    // Change operations
    rpc UpdateWorkspace(UpdateWorkspaceRequest) returns (UpdateWorkspaceResponse);
    rpc CreateWorkspace(CreateWorkspaceRequest) returns (CreateWorkspaceResponse);
    rpc DeleteWorkspace(DeleteWorkspaceRequest) returns (DeleteWorkspaceResponse);
    rpc ListWorkspaces(ListWorkspacesRequest) returns (ListWorkspacesResponse);
    rpc GetWorkspaceCurrentChange(GetWorkspaceCurrentChangeRequest) returns (GetWorkspaceCurrentChangeResponse);
    rpc GetWorkspaceId(GetWorkspaceIdRequest) returns (GetWorkspaceIdResponse);
    rpc GetWorkspaceName(GetWorkspaceNameRequest) returns (GetWorkspaceNameResponse);

    // File operations
    rpc ReadCommitFileHashes(ReadCommitFileHashesRequest) returns (ReadCommitFileHashesResponse);
    rpc ReadCommittedFile(ReadCommittedFileRequest) returns (stream FileReadOperation);
    rpc ReadWorkspaceFileHashes(ReadWorkspaceFileHashesRequest) returns (ReadWorkspaceFileHashesResponse);
    rpc ReadWorkspaceFile(ReadWorkspaceFileRequest) returns (stream FileReadOperation);
    rpc AddChange(AddChangeRequest) returns (AddChangeResponse);
    rpc MergeWorkspace(MergeWorkspaceRequest) returns (MergeWorkspaceResponse);
    rpc WriteWorkspaceOperationsStream(stream WriteWorkspaceOperationsRequest) returns (WriteWorkspaceOperationsResponse);
    rpc GetOperationStreamToken(GetOperationStreamTokenRequest) returns (GetOperationStreamTokenResponse);

    // Lock operations
    rpc UpdateFileLock(UpdateFileLockRequest) returns (UpdateFileLockResponse);
    rpc GetFileLock(GetFileLockRequest) returns (GetFileLockResponse);
    rpc ListFileLocks(ListFileLocksRequest) returns (ListFileLocksResponse);

    // User operations
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
    rpc CurrentUser(CurrentUserRequest) returns (CurrentUserResponse);
}

message AddChangeRequest {
    uint64 project_id = 1;
    string owner_username = 2;
    uint64 workspace_id = 3;
}

message AddChangeResponse {
    uint64 change_id = 1;
}


message GetOperationStreamTokenRequest {
    uint64 project_id = 1;
    string owner_username = 2;
    uint64 workspace_id = 3;
}

message GetOperationStreamTokenResponse {
    bytes token = 1;
    uint64 new_change_id = 2;
}

message GetFileLockRequest {
    uint64 project_id = 1;
    string owner_username = 2;
    string b64_encoded_path = 3;
    bool is_dir = 4;
}

message GetFileLockResponse {
    bool is_locked = 1;
}

message UpdateFileLockRequest {
    uint64 project_id = 1;
    string owner_username = 2;
    string b64_encoded_path = 3;
    bool is_dir = 4;
    bool lock_unlock_flag = 5;
}

message UpdateFileLockResponse {
    bool is_locked = 1;
}

message ListFileLocksRequest {
    uint64 project_id = 1;
    string owner_username = 2;
}

message ListFileLocksResponse {
    repeated FileLock locked_files = 1;
}

message FileLock {
    uint64 project_id = 1;
    string owner_username = 2;
    string b64_encoded_path = 3;
    bool is_dir = 4;
}

message GetWorkspaceNameRequest {
    uint64 project_id = 1;
    string owner_username = 2;
    uint64 workspace_id = 3;
}

message GetWorkspaceNameResponse {
    string workspace_name = 1;
}

message GetWorkspaceIdRequest {
    uint64 project_id = 1;
    string owner_username = 2;
    string workspace_name = 3;
}

message GetWorkspaceIdResponse {
    uint64 workspace_id = 1;
}

message GetWorkspaceCurrentChangeRequest {
    uint64 project_id = 1;
    string owner_username  = 2;
    uint64 workspace_id = 3;
}

message GetWorkspaceCurrentChangeResponse {
    uint64 change_id = 1;
}

message GetProjectCurrentCommitRequest {
    uint64 project_id = 1;
    string owner_username  = 2;
}

message GetProjectCurrentCommitResponse {
    uint64 commit_id = 1;
}


message GetProjectNameRequest {
    uint64 project_id = 1;
    string owner_username  = 2;
}

message GetProjectNameResponse {
    string project_name = 1;
}

message GetProjectIdRequest {
    string owner_username  = 1;
    string project_name = 2;
}

message GetProjectIdResponse {
    uint64 project_id = 1;
}

message WriteWorkspaceOperationsResponse{}

message FileMetadataDiff {
    enum Type {
        NoOp = 0;
        Create = 1;
        Update = 2;
        Delete = 3; 
    }
    message FileDiff {
        Type type = 1;
        File file = 2;
    }
    map<string, FileDiff> diffs = 1;
}

message MergeWorkspaceRequest {
    uint64 project_id = 1;
    string owner_username  = 2;
    uint64 workspace_id = 3;
    string merge_message = 4;
}
message MergeWorkspaceResponse {
    uint64 commit_id = 1;
}

message UpdateWorkspaceRequest {
    uint64 project_id = 1;
    string owner_username  = 2;
    uint64 workspace_id = 3;
}
message UpdateWorkspaceResponse {
    repeated string conflicts = 1;
}

message CreateWorkspaceRequest {
    uint64 project_id = 1;
    string owner_username  = 2;
    string workspaceName = 3;
}
message CreateWorkspaceResponse {
    uint64 workspace_id = 1;
}

message ListWorkspacesRequest {
    uint64 project_id = 1;
    string owner_username = 2;
    string project_name = 3;
}
message ListWorkspacesResponse {
    map<string, uint64> workspaces = 1;
    map<uint64, uint64> baseCommitIds = 2;
}

message WriteWorkspaceOperationsRequest {
    bytes operation_token = 1;
    repeated FileWriteOperation operations = 2;
}

message FileWriteOperation {
    bytes path_hash = 2;
    Chunk chunk = 3;
}

message FileReadOperation {
    bytes path_hash = 2;
    Chunk chunk = 3;
}

message File {
    bool dir = 2;
    bytes hash = 3;
}

message PathFile {
    string path = 1;
    File file = 2;
}

message FileMetadata {
    repeated PathFile files = 1;
}

message GetCollaboratorsRequest {
    uint64 project_id = 1;
    string owner_username  = 2;
}
message GetCollaboratorsResponse {
    repeated string usernames = 1;
}

message AddCollaboratorRequest {
    uint64 project_id = 1;
    string owner_username  = 2;
    string username = 3;
}
message AddCollaboratorResponse {}

message RemoveCollaboratorRequest {
    uint64 project_id = 1;
    string owner_username  = 2;
    string username = 3;
}
message RemoveCollaboratorResponse {}

message AddProjectRequest {
    string project_name = 1;
}
message AddProjectResponse {
    uint64 project_id = 1;
    string owner_username  = 2;
}

message DeleteWorkspaceRequest {
    string owner_username  =1;
    uint64 project_id = 2;
    uint64 workspace_id = 3;
}
message DeleteWorkspaceResponse {}

message GetWorkspaceRequest {
    uint64 project_id = 1;
    string owner_username  = 2;
    string workspace_name = 3;
}
message GetWorkspaceResponse {
    uint64 workspace_id = 1;
    uint64 change_id = 2;
}

message ListUserProjectsRequest {
    string owner_username = 1;
}

message ListUserProjectsResponse {
    message Project {
        string name = 1;
        uint64 id = 2;
        string owner_username = 3;
    }
    repeated Project projects = 1;
}

message CreateUserRequest {
    string username = 1;
}
message CreateUserResponse {}

message BrowseProjectRequest {
    string project_name = 1;
    string path = 2;
}

message BrowseProjectResponse {
    repeated string directories = 1;
    repeated string files = 2;
}

message CurrentUserRequest {}
message CurrentUserResponse {
    string username = 1;
}

message ChunkHash {
    uint64 offset = 1;
    uint64 length = 2;
    uint64 hash = 3;
}

message Chunk {
    uint64 offset = 1;
    uint64 length = 2;
    bytes data = 3;
    uint64 fingerprint = 4;
    uint64 hash = 5;
}

message ReadCommittedFileRequest {
    uint64 project_id = 1;
    string owner_username  = 2;
    uint64 commit_id = 3;
    bytes path_hash = 4;
    map<uint64, bytes> local_chunk_hashes = 5;
}

message ReadWorkspaceFileRequest {
    uint64 project_id = 1;
    string owner_username  = 2;
    uint64 workspace_id = 3;
    uint64 change_id = 4;
    bytes path_hash = 5;
    map<uint64, bytes> local_chunk_hashes = 6;
}

message HashList {
    bytes path_hash = 1;
    map<uint64, bytes> hashes = 2;
}

message ReadWorkspaceFileHashesResponse {
    repeated HashList hashes = 1;
}

message ReadWorkspaceFileHashesRequest {
    uint64 project_id = 1;
    string owner_username  = 2;
    uint64 workspace_id = 3;
    uint64 change_id = 4;
    repeated bytes path_hashes = 5;
}

message ReadCommitFileHashesRequest {
    uint64 project_id = 1;
    string owner_username  = 2;
    uint64 commit_id = 3;
    bytes path_hash = 4;
}

message ReadCommitFileHashesResponse {
    map<uint64, bytes> hashes = 1;
}